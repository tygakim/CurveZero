# new approach
1) compile all
2) deploy all contracts but TrustedAddy goes last + addys into constructor
3) update all contracts to point to TrustedAddy
4) issue USDC CZT and WETH
5) give USDC CZT and WTH approvals vs czcore
6) create 1 lp
7) create 1 pp
8) create 1 cb
9) test inc / dec collateral on cb
10) test refinance and repay

# compile all
starknet-compile Interface/LiquidityProvider.cairo --output Compiled/LiquidityProvider_compiled.json --abi Compiled/LiquidityProvider_abi.json
starknet-compile Interface/PriceProvider.cairo --output Compiled/PriceProvider_compiled.json --abi Compiled/PriceProvider_abi.json
starknet-compile Interface/CapitalBorrower.cairo --output Compiled/CapitalBorrower_compiled.json --abi Compiled/CapitalBorrower_abi.json
starknet-compile Interface/LoanLiquidator.cairo --output Compiled/LoanLiquidator_compiled.json --abi Compiled/LoanLiquidator_abi.json
starknet-compile Interface/GovenanceToken.cairo --output Compiled/GovenanceToken_compiled.json --abi Compiled/GovenanceToken_abi.json
starknet-compile Core/InsuranceFund.cairo --output Compiled/InsuranceFund_compiled.json --abi Compiled/InsuranceFund_abi.json
starknet-compile Core/CZCore.cairo --output Compiled/CZCore_compiled.json --abi Compiled/CZCore_abi.json
starknet-compile Core/Controller.cairo --output Compiled/Controller_compiled.json --abi Compiled/Controller_abi.json
starknet-compile Config/Settings.cairo --output Compiled/Settings_compiled.json --abi Compiled/Settings_abi.json
starknet-compile Testing/ERC20_base.cairo --output Compiled/ERC20_base_compiled.json --abi Compiled/ERC20_base_abi.json
starknet-compile Testing/Oracle.cairo --output Compiled/Oracle_compiled.json --abi Compiled/Oracle_abi.json
starknet-compile Config/TrustedAddy.cairo --output Compiled/TrustedAddy_compiled.json --abi Compiled/TrustedAddy_abi.json

starknet deploy --contract Compiled/LiquidityProvider_compiled.json --inputs 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0
starknet deploy --contract Compiled/PriceProvider_compiled.json --inputs 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0
starknet deploy --contract Compiled/CapitalBorrower_compiled.json --inputs 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0
starknet deploy --contract Compiled/LoanLiquidator_compiled.json --inputs 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0
starknet deploy --contract Compiled/GovenanceToken_compiled.json --inputs 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0
starknet deploy --contract Compiled/InsuranceFund_compiled.json --inputs 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0
starknet deploy --contract Compiled/CZCore_compiled.json --inputs 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0
starknet deploy --contract Compiled/Controller_compiled.json --inputs 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0
starknet deploy --contract Compiled/Settings_compiled.json --inputs 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0
starknet deploy --contract Compiled/ERC20_base_compiled.json --inputs 55534443 55534443 1000000000000000000000000 0 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0
starknet deploy --contract Compiled/ERC20_base_compiled.json --inputs 4414036 4414036 1000000000000000000000000 0 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0
starknet deploy --contract Compiled/ERC20_base_compiled.json --inputs 57455448 57455448 10000000000000000000000 0 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0
starknet deploy --contract Compiled/Oracle_compiled.json --inputs 57455448 57455448
starknet deploy --contract Compiled/TrustedAddy_compiled.json \
--inputs 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0 \
    0x01c8efeb130834b3a5ca7620c57665b171f7f15ca5e2cd2fdc20c8faff33995e \
    0x0330c80d1757df9e0b8e1b9c357e3efcdd523e665cae451b7c8f89e371ebf3ea \
    0x05fdd1e4c08054251b07b2e16393006756dc8f2cffc02247f4c8b7704d48f1f2 \
    0 \
    0x0205487800f16eee15887dfcbd4584f2c14a4fa8f8aab5bd8911c0ee39218191 \
    0x013654881aadc1bd3083aac33cbd8e596443604a0ef6b6921e2762b7fa4c7a13 \
    0x048ff1753d7031556ac2e839a931d1d9d96cf4fd3223b7652d0f5e53422a3123 \
    0x0174bc2795733a0bb3d0846aad1b9ebd5fc9242c0d41d63c80cd793b37557bda \
    0x06c3a85eb607b507056a1bfb388bc47b10fe4d1e0235a1dab65b3d127c6d18f8 \
    0x060bbb4f62540bd6a638d57df71edb08e8697ddb245f243f08708c533580be52 \
    0x06fd0e970fab19c68b376d904ea2609593d271abcc66e8f66069d28db83221bd \
    0x05334e9391f58cd232280b20685c706ae3910bd142f83facc877291fa0b45604 \
    0x01219f0cbe1bcd38a9a431361b6f632fc0c65795fb887acf9c238670ef3a266e

Last test
[owner] = 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0
[lp] = 0x01c8efeb130834b3a5ca7620c57665b171f7f15ca5e2cd2fdc20c8faff33995e
[pp] = 0x0330c80d1757df9e0b8e1b9c357e3efcdd523e665cae451b7c8f89e371ebf3ea
[cb] = 0x05fdd1e4c08054251b07b2e16393006756dc8f2cffc02247f4c8b7704d48f1f2
[ll] = 0
[gt] = 0x0205487800f16eee15887dfcbd4584f2c14a4fa8f8aab5bd8911c0ee39218191
[if] = 0x013654881aadc1bd3083aac33cbd8e596443604a0ef6b6921e2762b7fa4c7a13
[czcore] = 0x048ff1753d7031556ac2e839a931d1d9d96cf4fd3223b7652d0f5e53422a3123
[controller] = 0x0174bc2795733a0bb3d0846aad1b9ebd5fc9242c0d41d63c80cd793b37557bda
[setttings] = 0x06c3a85eb607b507056a1bfb388bc47b10fe4d1e0235a1dab65b3d127c6d18f8
[usdc] = 0x060bbb4f62540bd6a638d57df71edb08e8697ddb245f243f08708c533580be52
[czt] = 0x06fd0e970fab19c68b376d904ea2609593d271abcc66e8f66069d28db83221bd
[weth] = 0x05334e9391f58cd232280b20685c706ae3910bd142f83facc877291fa0b45604
[oracle] = 0x01219f0cbe1bcd38a9a431361b6f632fc0c65795fb887acf9c238670ef3a266e
[trusted] = 0x039554a69f6bd23319f6a49bd7f002f6f0e1a514b72a4983912abd6e0191639e

# check transactions / testing
starknet tx_status --hash 0x3d4689e0ec1af5cb1c79b9cdf0819400b6635838e9b2ddc5b80b4fda009d084
starknet get_transaction --hash 0x3d4689e0ec1af5cb1c79b9cdf0819400b6635838e9b2ddc5b80b4fda009d084
starknet get_transaction_receipt --hash 0x3d4689e0ec1af5cb1c79b9cdf0819400b6635838e9b2ddc5b80b4fda009d084

# call / invoke
starknet call \
    --address 0x059bdbb99a3daa7370a420951d6383ec3857a4b456785dee8e96a1bab1ce46f0 \
    --abi test_abi.json \
    --function check_user_balance \
    --inputs 0x0077113fdcee61d3257d7617d7b01a766a7fcd1dd05e96a91f00e13ea4e77399 \
             0x00fab882affd32569c826ae1df7f00f95013e1da5ded793f5553a62bfbf09cac \
             1152921504606846976000


# CB testing... math lib limitations
12345
100000000000
100000000
165425696298959820

517320185977821066645710419783955797854300374854704929745928561486316208555, 2819868301477575017305248444873021753314081755367429630057371505934600164739, 1168569266187495623930733612466896587645555634574438483193014900819665976824, 3304586175284284706389108604975660264482260261893960117610706245837885648243, 2000000, 1628448741648245036800002906075225705100596136133912895015035902954123957052

# [ signed_loanID_r , signed_loanID_s , signed_rate_r , signed_rate_s , rate , pp_pub , ..... ]

from starkware.crypto.signature.signature import (pedersen_hash, private_to_stark_key, sign)
private_key = 12345
message_hash = pedersen_hash(2000000)
public_key = private_to_stark_key(private_key)
signature = sign(msg_hash=message_hash, priv_key=private_key)
print(f'Public key: {public_key}')
print(f'Signature: {signature}')
