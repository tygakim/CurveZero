####################################################################################
# @title Deploy
# @dev used for recording the deploy process and latest contract addyys
# Includes
# - Current testing approach
# - Compile all
# - Deploy all
# - Latest test addys
# - Transaction / call / invoke formats
# - PP data for testing loans
# @author xan-crypto
####################################################################################

# new approach
1) compile all
2) deploy all contracts but TrustedAddy goes last + addys into constructor
3) update all contracts to point to TrustedAddy
4) issue USDC CZT and WETH
5) give USDC CZT and WTH approvals vs czcore
6) create 1 lp
7) create 1 pp
8) create 1 cb
9) test inc / dec collateral on cb
10) test refinance and repay

# compile all
starknet-compile Interface/LiquidityProvider.cairo --output Compiled/LiquidityProvider_compiled.json --abi Compiled/LiquidityProvider_abi.json
starknet-compile Interface/PriceProvider.cairo --output Compiled/PriceProvider_compiled.json --abi Compiled/PriceProvider_abi.json
starknet-compile Interface/CapitalBorrower.cairo --output Compiled/CapitalBorrower_compiled.json --abi Compiled/CapitalBorrower_abi.json
starknet-compile Interface/LoanLiquidator.cairo --output Compiled/LoanLiquidator_compiled.json --abi Compiled/LoanLiquidator_abi.json
starknet-compile Interface/GovenanceToken.cairo --output Compiled/GovenanceToken_compiled.json --abi Compiled/GovenanceToken_abi.json
starknet-compile Core/InsuranceFund.cairo --output Compiled/InsuranceFund_compiled.json --abi Compiled/InsuranceFund_abi.json
starknet-compile Core/CZCore.cairo --output Compiled/CZCore_compiled.json --abi Compiled/CZCore_abi.json
starknet-compile Core/Controller.cairo --output Compiled/Controller_compiled.json --abi Compiled/Controller_abi.json
starknet-compile Config/Settings.cairo --output Compiled/Settings_compiled.json --abi Compiled/Settings_abi.json
starknet-compile Testing/ERC20_base.cairo --output Compiled/ERC20_base_compiled.json --abi Compiled/ERC20_base_abi.json
starknet-compile Testing/Oracle.cairo --output Compiled/Oracle_compiled.json --abi Compiled/Oracle_abi.json
starknet-compile Config/TrustedAddy.cairo --output Compiled/TrustedAddy_compiled.json --abi Compiled/TrustedAddy_abi.json

starknet deploy --contract Compiled/LiquidityProvider_compiled.json --inputs 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0
starknet deploy --contract Compiled/PriceProvider_compiled.json --inputs 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0
starknet deploy --contract Compiled/CapitalBorrower_compiled.json --inputs 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0
starknet deploy --contract Compiled/LoanLiquidator_compiled.json --inputs 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0
starknet deploy --contract Compiled/GovenanceToken_compiled.json --inputs 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0
starknet deploy --contract Compiled/InsuranceFund_compiled.json --inputs 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0
starknet deploy --contract Compiled/CZCore_compiled.json --inputs 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0
starknet deploy --contract Compiled/Controller_compiled.json --inputs 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0
starknet deploy --contract Compiled/Settings_compiled.json --inputs 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0
starknet deploy --contract Compiled/ERC20_base_compiled.json --inputs 55534443 55534443 1000000000000000000000000 0 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0
starknet deploy --contract Compiled/ERC20_base_compiled.json --inputs 4414036 4414036 1000000000000000000000000 0 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0
starknet deploy --contract Compiled/ERC20_base_compiled.json --inputs 57455448 57455448 10000000000000000000000 0 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0
starknet deploy --contract Compiled/Oracle_compiled.json --inputs 57455448 57455448
starknet deploy --contract Compiled/TrustedAddy_compiled.json \
--inputs 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0 \
    0x0081a460a8522950db9e07785471662e740507e637c2ba98cf364508c79fa583 \
    0x01467abc2e8f3ff6928faefd97944aee16ab1b9b53c7e56a43506b4d6bd24733 \
    0x06f62403b52495ba06c38c9eec8f4c82e32a3cc96278163dc1f29b88e709f952 \
    0x01499d2c9c2257507419c41bdb3c55f2eb1260a6bccf0c2ed9b25849bc72b53d \
    0x04e16422adbbf8927dab51424e047007cedd818eed4198d5857b42a8a5ff7d9e \
    0x07a667e295ed447590c46bea689d9bf0044de40a830c6f707d22eedd69e2b971 \
    0x0033e12a0c6dde60960f524cad196b2938ac3f1224c5fe2b11449fe0d49ffe35 \
    0x064007399c2a6df1cfb3599e7c31ba81f9bd5fd7b5a7d7793f093082e9c4ce3d \
    0x06b7a7abb1419efcc8ccc8de8b88c7f0be837c00ece18a2b7cc0a0cb0749d882 \
    0x00e1d76627d691a1fa054f0c534934c98d45a4e23ebcebb5132f7d30e7c035b3 \
    0x0708ffb527fb688a85d795908ef105287c2bf302a151064def6fcb18d83dbc65 \
    0x05b12e7185abf3cf5e96aa41b38f6166303aa30db755a8a84600231828028696 \
    0x020c719b9292f64640de3d5e829b0f3b4f8330eeb76fc6c4f16b7c08ca3af70d

Last test
[owner] = 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0
[lp] = 0x0081a460a8522950db9e07785471662e740507e637c2ba98cf364508c79fa583
[pp] = 0x01467abc2e8f3ff6928faefd97944aee16ab1b9b53c7e56a43506b4d6bd24733
[cb] = 0x06f62403b52495ba06c38c9eec8f4c82e32a3cc96278163dc1f29b88e709f952
[ll] = 0x01499d2c9c2257507419c41bdb3c55f2eb1260a6bccf0c2ed9b25849bc72b53d
[gt] = 0x04e16422adbbf8927dab51424e047007cedd818eed4198d5857b42a8a5ff7d9e
[if] = 0x07a667e295ed447590c46bea689d9bf0044de40a830c6f707d22eedd69e2b971
[czcore] = 0x0033e12a0c6dde60960f524cad196b2938ac3f1224c5fe2b11449fe0d49ffe35
[controller] = 0x064007399c2a6df1cfb3599e7c31ba81f9bd5fd7b5a7d7793f093082e9c4ce3d
[setttings] = 0x06b7a7abb1419efcc8ccc8de8b88c7f0be837c00ece18a2b7cc0a0cb0749d882
[usdc] = 0x00e1d76627d691a1fa054f0c534934c98d45a4e23ebcebb5132f7d30e7c035b3
[czt] = 0x0708ffb527fb688a85d795908ef105287c2bf302a151064def6fcb18d83dbc65
[weth] = 0x05b12e7185abf3cf5e96aa41b38f6166303aa30db755a8a84600231828028696
[oracle] = 0x020c719b9292f64640de3d5e829b0f3b4f8330eeb76fc6c4f16b7c08ca3af70d
[trusted] = 0x026210d80f899477ff27d4b536fa1ceb93c9d43b82bb1811ebd4f228213eda37

# check transactions / testing
starknet tx_status --hash 0x3d4689e0ec1af5cb1c79b9cdf0819400b6635838e9b2ddc5b80b4fda009d084
starknet get_transaction --hash 0x3d4689e0ec1af5cb1c79b9cdf0819400b6635838e9b2ddc5b80b4fda009d084
starknet get_transaction_receipt --hash 0x3d4689e0ec1af5cb1c79b9cdf0819400b6635838e9b2ddc5b80b4fda009d084

# call / invoke
starknet call \
    --address 0x059bdbb99a3daa7370a420951d6383ec3857a4b456785dee8e96a1bab1ce46f0 \
    --abi test_abi.json \
    --function check_user_balance \
    --inputs 0x0077113fdcee61d3257d7617d7b01a766a7fcd1dd05e96a91f00e13ea4e77399 \
             0x00fab882affd32569c826ae1df7f00f95013e1da5ded793f5553a62bfbf09cac \
             1152921504606846976000


# CB testing... math lib limitations
12345
100000000000
100000000
165425696298959820

517320185977821066645710419783955797854300374854704929745928561486316208555, 2819868301477575017305248444873021753314081755367429630057371505934600164739, 1168569266187495623930733612466896587645555634574438483193014900819665976824, 3304586175284284706389108604975660264482260261893960117610706245837885648243, 2000000, 1628448741648245036800002906075225705100596136133912895015035902954123957052

# [ signed_loanID_r , signed_loanID_s , signed_rate_r , signed_rate_s , rate , pp_pub , ..... ]

from starkware.crypto.signature.signature import (pedersen_hash, private_to_stark_key, sign)
private_key = 12345
message_hash = pedersen_hash(2000000)
public_key = private_to_stark_key(private_key)
signature = sign(msg_hash=message_hash, priv_key=private_key)
print(f'Public key: {public_key}')
print(f'Signature: {signature}')
