####################################################################################
# @title Deploy
# @dev used for recording the deploy process and latest contract addyys
# Includes
# - Current testing approach
# - Compile all
# - Deploy all
# - Latest test addys
# - Transaction / call / invoke formats
# - PP data for testing loans
# @author xan-crypto
####################################################################################

# new approach
1) compile all
2) deploy all contracts but TrustedAddy goes last + addys into constructor
3) update all contracts to point to TrustedAddy
4) issue USDC CZT and WETH
5) give USDC CZT and WTH approvals vs czcore
6) create 1 lp
7) create 1 pp
8) create 1 cb
9) test inc / dec collateral on cb
10) test refinance and repay

# compile all
starknet-compile Interface/LiquidityProvider.cairo --output Compiled/LiquidityProvider_compiled.json --abi Compiled/LiquidityProvider_abi.json
starknet-compile Interface/PriceProvider.cairo --output Compiled/PriceProvider_compiled.json --abi Compiled/PriceProvider_abi.json
starknet-compile Interface/CapitalBorrower.cairo --output Compiled/CapitalBorrower_compiled.json --abi Compiled/CapitalBorrower_abi.json
starknet-compile Interface/LoanLiquidator.cairo --output Compiled/LoanLiquidator_compiled.json --abi Compiled/LoanLiquidator_abi.json
starknet-compile Interface/GovenanceToken.cairo --output Compiled/GovenanceToken_compiled.json --abi Compiled/GovenanceToken_abi.json
starknet-compile Core/InsuranceFund.cairo --output Compiled/InsuranceFund_compiled.json --abi Compiled/InsuranceFund_abi.json
starknet-compile Core/CZCore.cairo --output Compiled/CZCore_compiled.json --abi Compiled/CZCore_abi.json
starknet-compile Core/Controller.cairo --output Compiled/Controller_compiled.json --abi Compiled/Controller_abi.json
starknet-compile Config/Settings.cairo --output Compiled/Settings_compiled.json --abi Compiled/Settings_abi.json
starknet-compile Testing/ERC20_base.cairo --output Compiled/ERC20_base_compiled.json --abi Compiled/ERC20_base_abi.json
starknet-compile Testing/Oracle.cairo --output Compiled/Oracle_compiled.json --abi Compiled/Oracle_abi.json
starknet-compile Config/TrustedAddy.cairo --output Compiled/TrustedAddy_compiled.json --abi Compiled/TrustedAddy_abi.json

starknet deploy --contract Compiled/LiquidityProvider_compiled.json --inputs 0x05d28f7a7f15394ed40f7432c189d5103639163739f2b119e1ba131bca1577bc
starknet deploy --contract Compiled/PriceProvider_compiled.json --inputs 0x05d28f7a7f15394ed40f7432c189d5103639163739f2b119e1ba131bca1577bc
starknet deploy --contract Compiled/CapitalBorrower_compiled.json --inputs 0x05d28f7a7f15394ed40f7432c189d5103639163739f2b119e1ba131bca1577bc
starknet deploy --contract Compiled/LoanLiquidator_compiled.json --inputs 0x05d28f7a7f15394ed40f7432c189d5103639163739f2b119e1ba131bca1577bc
starknet deploy --contract Compiled/GovenanceToken_compiled.json --inputs 0x05d28f7a7f15394ed40f7432c189d5103639163739f2b119e1ba131bca1577bc
starknet deploy --contract Compiled/InsuranceFund_compiled.json --inputs 0x05d28f7a7f15394ed40f7432c189d5103639163739f2b119e1ba131bca1577bc
starknet deploy --contract Compiled/CZCore_compiled.json --inputs 0x05d28f7a7f15394ed40f7432c189d5103639163739f2b119e1ba131bca1577bc
starknet deploy --contract Compiled/Controller_compiled.json --inputs 0x05d28f7a7f15394ed40f7432c189d5103639163739f2b119e1ba131bca1577bc
starknet deploy --contract Compiled/Settings_compiled.json --inputs 0x05d28f7a7f15394ed40f7432c189d5103639163739f2b119e1ba131bca1577bc
starknet deploy --contract Compiled/ERC20_base_compiled.json --inputs 55534443 55534443 1000000000000000000000000 0 0x05d28f7a7f15394ed40f7432c189d5103639163739f2b119e1ba131bca1577bc
starknet deploy --contract Compiled/ERC20_base_compiled.json --inputs 4414036 4414036 1000000000000000000000000 0 0x05d28f7a7f15394ed40f7432c189d5103639163739f2b119e1ba131bca1577bc
starknet deploy --contract Compiled/ERC20_base_compiled.json --inputs 57455448 57455448 10000000000000000000000 0 0x05d28f7a7f15394ed40f7432c189d5103639163739f2b119e1ba131bca1577bc
starknet deploy --contract Compiled/Oracle_compiled.json --inputs 57455448 57455448
starknet deploy --contract Compiled/TrustedAddy_compiled.json \
--inputs 0x05d28f7a7f15394ed40f7432c189d5103639163739f2b119e1ba131bca1577bc \
    0x004dd87533015c13d31525ef924ee41477f882cf47c2106cd51ca2dedd9f8a3a \
    0x030f76e8e9ddb74c483df5f91139bf4152c9ea017a1407dbbdeeb0f00ebe2b5b \
    0x044ed148a6bdfdd6a2ff6505cbf778f22726148535245b6477012bbb7fce60aa \
    0x02ad1980be3e0f1b1a917f513bf8e223c1dd6da486148a782985c14ed3bc1ce0 \
    0x01341d52a42d6563c19fa54052c5fb1087df64f5fc8818eab4d2691cd67ae3c6 \
    0x049a2a8f87c9b7862ad327e4cf6f8b323ebe90f687d0061c7658bc8c8e5d14e2 \
    0x00a38d79305cd37a600245fdc6a15aca07e161573c319e49bc6b063199ed1fdb \
    0x06372ad9d57236a9458ac169f5b895eb64b74a3119eb14372dccb269715a0156 \
    0x01c81dcf7e35a229b9177df7d63a9c581ead3b223c5a2b085bf002d08ee390c5 \
    0x057af87635e8ec51b854908559241c0fe1e5a1ba0fc7a8e3c06182298a8ede73 \
    0x04fc0a07d942e287b88848268cdabf99d17fd5616cc71bd470a5309f871da70c \
    0x07e96431606c35d688f02b78805e77bf23ebde9a05fbf57e02af927a8a50e5c5 \
    0x048371f71d137d1b947e687cf0fab51d07ad5d7e2547b91d7777fed86e0aa556

Last test
[owner] = 0x05d28f7a7f15394ed40f7432c189d5103639163739f2b119e1ba131bca1577bc
[lp] = 0x004dd87533015c13d31525ef924ee41477f882cf47c2106cd51ca2dedd9f8a3a
[pp] = 0x030f76e8e9ddb74c483df5f91139bf4152c9ea017a1407dbbdeeb0f00ebe2b5b
[cb] = 0x044ed148a6bdfdd6a2ff6505cbf778f22726148535245b6477012bbb7fce60aa
[ll] = 0x02ad1980be3e0f1b1a917f513bf8e223c1dd6da486148a782985c14ed3bc1ce0
[gt] = 0x01341d52a42d6563c19fa54052c5fb1087df64f5fc8818eab4d2691cd67ae3c6
[if] = 0x049a2a8f87c9b7862ad327e4cf6f8b323ebe90f687d0061c7658bc8c8e5d14e2
[czcore] = 0x00a38d79305cd37a600245fdc6a15aca07e161573c319e49bc6b063199ed1fdb
[controller] = 0x06372ad9d57236a9458ac169f5b895eb64b74a3119eb14372dccb269715a0156
[setttings] = 0x01c81dcf7e35a229b9177df7d63a9c581ead3b223c5a2b085bf002d08ee390c5
[usdc] = 0x057af87635e8ec51b854908559241c0fe1e5a1ba0fc7a8e3c06182298a8ede73
[czt] = 0x04fc0a07d942e287b88848268cdabf99d17fd5616cc71bd470a5309f871da70c
[weth] = 0x07e96431606c35d688f02b78805e77bf23ebde9a05fbf57e02af927a8a50e5c5
[oracle] = 0x048371f71d137d1b947e687cf0fab51d07ad5d7e2547b91d7777fed86e0aa556
[trusted] = 0x06d01c4f815f1e1834c179fb583c91f7f6219f83934a9e146f1d087b0134721d

# check transactions / testing
starknet tx_status --hash 0x3d4689e0ec1af5cb1c79b9cdf0819400b6635838e9b2ddc5b80b4fda009d084
starknet get_transaction --hash 0x3d4689e0ec1af5cb1c79b9cdf0819400b6635838e9b2ddc5b80b4fda009d084
starknet get_transaction_receipt --hash 0x3d4689e0ec1af5cb1c79b9cdf0819400b6635838e9b2ddc5b80b4fda009d084

# call / invoke
starknet call \
    --address 0x059bdbb99a3daa7370a420951d6383ec3857a4b456785dee8e96a1bab1ce46f0 \
    --abi test_abi.json \
    --function check_user_balance \
    --inputs 0x0077113fdcee61d3257d7617d7b01a766a7fcd1dd05e96a91f00e13ea4e77399 \
             0x00fab882affd32569c826ae1df7f00f95013e1da5ded793f5553a62bfbf09cac \
             1152921504606846976000


# CB testing... math lib limitations
12345
100000000000
100000000
165425696298959820
517320185977821066645710419783955797854300374854704929745928561486316208555, 2819868301477575017305248444873021753314081755367429630057371505934600164739, 1168569266187495623930733612466896587645555634574438483193014900819665976824, 3304586175284284706389108604975660264482260261893960117610706245837885648243, 2000000, 1628448741648245036800002906075225705100596136133912895015035902954123957052, 517320185977821066645710419783955797854300374854704929745928561486316208555, 2819868301477575017305248444873021753314081755367429630057371505934600164739, 1168569266187495623930733612466896587645555634574438483193014900819665976824, 3304586175284284706389108604975660264482260261893960117610706245837885648243, 2000000, 1628448741648245036800002906075225705100596136133912895015035902954123957052,
517320185977821066645710419783955797854300374854704929745928561486316208555, 2819868301477575017305248444873021753314081755367429630057371505934600164739, 1168569266187495623930733612466896587645555634574438483193014900819665976824, 3304586175284284706389108604975660264482260261893960117610706245837885648243, 2000000, 1628448741648245036800002906075225705100596136133912895015035902954123957052

# [ signed_loanID_r , signed_loanID_s , signed_rate_r , signed_rate_s , rate , pp_pub , ..... ]

from starkware.crypto.signature.signature import (pedersen_hash, private_to_stark_key, sign)
private_key = 12345
message_hash = pedersen_hash(2000000)
public_key = private_to_stark_key(private_key)
signature = sign(msg_hash=message_hash, priv_key=private_key)
print(f'Public key: {public_key}')
print(f'Signature: {signature}')
