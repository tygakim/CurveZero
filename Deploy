# new approach
1) compile all
2) deploy all contracts but TrustedAddy goes last + addys into constructor
3) update all contracts to point to TrustedAddy
4) issue USDC CZT and WETH
5) give USDC CZT and WTH approvals vs czcore
6) create 1 lp
7) create 1 pp
8) create 1 cb
9) test inc / dec collateral on cb
10) test refinance and repay

# compile all
starknet-compile Interface/LiquidityProvider.cairo --output Compiled/LiquidityProvider_compiled.json --abi Compiled/LiquidityProvider_abi.json
starknet-compile Interface/PriceProvider.cairo --output Compiled/PriceProvider_compiled.json --abi Compiled/PriceProvider_abi.json
starknet-compile Interface/CapitalBorrower.cairo --output Compiled/CapitalBorrower_compiled.json --abi Compiled/CapitalBorrower_abi.json
starknet-compile Interface/LoanLiquidator.cairo --output Compiled/LoanLiquidator_compiled.json --abi Compiled/LoanLiquidator_abi.json
starknet-compile Interface/GovenanceToken.cairo --output Compiled/GovenanceToken_compiled.json --abi Compiled/GovenanceToken_abi.json
starknet-compile Core/InsuranceFund.cairo --output Compiled/InsuranceFund_compiled.json --abi Compiled/InsuranceFund_abi.json
starknet-compile Core/CZCore.cairo --output Compiled/CZCore_compiled.json --abi Compiled/CZCore_abi.json
starknet-compile Core/Controller.cairo --output Compiled/Controller_compiled.json --abi Compiled/Controller_abi.json
starknet-compile Config/Settings.cairo --output Compiled/Settings_compiled.json --abi Compiled/Settings_abi.json
starknet-compile Testing/ERC20_base.cairo --output Compiled/ERC20_base_compiled.json --abi Compiled/ERC20_base_abi.json
starknet-compile Testing/Oracle.cairo --output Compiled/Oracle_compiled.json --abi Compiled/Oracle_abi.json
starknet-compile Config/TrustedAddy.cairo --output Compiled/TrustedAddy_compiled.json --abi Compiled/TrustedAddy_abi.json

starknet deploy --contract Compiled/LiquidityProvider_compiled.json --inputs 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0
starknet deploy --contract Compiled/PriceProvider_compiled.json --inputs 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0
starknet deploy --contract Compiled/CapitalBorrower_compiled.json --inputs 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0
starknet deploy --contract Compiled/LoanLiquidator_compiled.json --inputs 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0
starknet deploy --contract Compiled/GovenanceToken_compiled.json --inputs 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0
starknet deploy --contract Compiled/InsuranceFund_compiled.json --inputs 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0
starknet deploy --contract Compiled/CZCore_compiled.json --inputs 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0
starknet deploy --contract Compiled/Controller_compiled.json --inputs 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0
starknet deploy --contract Compiled/Settings_compiled.json --inputs 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0
starknet deploy --contract Compiled/ERC20_base_compiled.json --inputs 55534443 55534443 1000000000000000000000000 0 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0
starknet deploy --contract Compiled/ERC20_base_compiled.json --inputs 4414036 4414036 1000000000000000000000000 0 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0
starknet deploy --contract Compiled/ERC20_base_compiled.json --inputs 57455448 57455448 10000000000000000000000 0 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0
starknet deploy --contract Compiled/Oracle_compiled.json --inputs 57455448 57455448
starknet deploy --contract Compiled/TrustedAddy_compiled.json \
--inputs 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0 \
    0x05ca47318e0944568798ba035759a03fb342868ddcdc0b42658b5a867ec84312 \
    0x006bd4c7071bb87a4d415cd25443b9bdea7142838b5e384e7c14c495606e8cb4 \
    0x06a128f1655d480b435f71d079978ec762826c7649984888d4dadc0bdaad7697 \
    0 \
    0x043b51d5eaf7702b52f0b46898e3b975cd4917cc504690d95b2006395acb7156 \
    0x06fa7cbd8aba94a06996ead080d10e9345fa43d0907c2378452ff5cbe0d82b53 \
    0x04e57c36d3c70611b43d71001a21140f61244f6d1a90a5312b293035c7383843 \
    0x0442a75c697910a72b4ff7c66559aa787ad1411c8534cf515ccfe6fe1570d239 \
    0x065f513367f61d1cba5f3653da730654d0511fd583ec4c62d63ec342fcd948ca \
    0x035483f86d8c773d6f17e4ba89fdcbceea8d3b5d691e1ddee7234b0882f961fa \
    0x05e7e3b278ce4ba334ef52ad9e0a72fe9ac6fef07ebf70951529b87954fcec26 \
    0x072a7ed0e04e1b4c8adec5dd69264cde4178eae9d7c10bb88bc1f6dc9669b4c1 \
    0x0716733353307e15dc8cdbea2a2b84229ab72a9d3b1f0e0e08befbf37b705f98

Last test
[owner] = 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0
[lp] = 0x05ca47318e0944568798ba035759a03fb342868ddcdc0b42658b5a867ec84312
[pp] = 0x006bd4c7071bb87a4d415cd25443b9bdea7142838b5e384e7c14c495606e8cb4
[cb] = 0x06a128f1655d480b435f71d079978ec762826c7649984888d4dadc0bdaad7697
[ll] = 0
[gt] = 0x043b51d5eaf7702b52f0b46898e3b975cd4917cc504690d95b2006395acb7156
[if] = 0x06fa7cbd8aba94a06996ead080d10e9345fa43d0907c2378452ff5cbe0d82b53
[czcore] = 0x04e57c36d3c70611b43d71001a21140f61244f6d1a90a5312b293035c7383843
[controller] = 0x0442a75c697910a72b4ff7c66559aa787ad1411c8534cf515ccfe6fe1570d239
[setttings] = 0x065f513367f61d1cba5f3653da730654d0511fd583ec4c62d63ec342fcd948ca
[usdc] = 0x035483f86d8c773d6f17e4ba89fdcbceea8d3b5d691e1ddee7234b0882f961fa
[czt] = 0x05e7e3b278ce4ba334ef52ad9e0a72fe9ac6fef07ebf70951529b87954fcec26
[weth] = 0x072a7ed0e04e1b4c8adec5dd69264cde4178eae9d7c10bb88bc1f6dc9669b4c1
[oracle] = 0x0716733353307e15dc8cdbea2a2b84229ab72a9d3b1f0e0e08befbf37b705f98
[trusted] = 0x0090fa01b5c3ae4b8df6b7d34cfdc6298130932be7017721927f72ddeade9f3d

# check transactions / testing
starknet tx_status --hash 0x3d4689e0ec1af5cb1c79b9cdf0819400b6635838e9b2ddc5b80b4fda009d084
starknet get_transaction --hash 0x3d4689e0ec1af5cb1c79b9cdf0819400b6635838e9b2ddc5b80b4fda009d084
starknet get_transaction_receipt --hash 0x3d4689e0ec1af5cb1c79b9cdf0819400b6635838e9b2ddc5b80b4fda009d084

# call / invoke
starknet call \
    --address 0x059bdbb99a3daa7370a420951d6383ec3857a4b456785dee8e96a1bab1ce46f0 \
    --abi test_abi.json \
    --function check_user_balance \
    --inputs 0x0077113fdcee61d3257d7617d7b01a766a7fcd1dd05e96a91f00e13ea4e77399 \
             0x00fab882affd32569c826ae1df7f00f95013e1da5ded793f5553a62bfbf09cac \
             1152921504606846976000


# CB testing... math lib limitations
12345
2305843009213693952000
2305843009213693952
3814688422472512678689505280

517320185977821066645710419783955797854300374854704929745928561486316208555, 2819868301477575017305248444873021753314081755367429630057371505934600164739, 324671271056138900132408796652613821767969616877275822713419303763916392539, 1681254897269253159820720201367728140615237879757852385143353026297808691676, 46116860184273879, 1628448741648245036800002906075225705100596136133912895015035902954123957052,
517320185977821066645710419783955797854300374854704929745928561486316208555, 2819868301477575017305248444873021753314081755367429630057371505934600164739, 324671271056138900132408796652613821767969616877275822713419303763916392539, 1681254897269253159820720201367728140615237879757852385143353026297808691676, 46116860184273879, 1628448741648245036800002906075225705100596136133912895015035902954123957052,
517320185977821066645710419783955797854300374854704929745928561486316208555, 2819868301477575017305248444873021753314081755367429630057371505934600164739, 324671271056138900132408796652613821767969616877275822713419303763916392539, 1681254897269253159820720201367728140615237879757852385143353026297808691676, 46116860184273879, 1628448741648245036800002906075225705100596136133912895015035902954123957052

from starkware.crypto.signature.signature import (pedersen_hash, private_to_stark_key, sign)
private_key = 12345
message_hash = pedersen_hash(46116860184273879)
public_key = private_to_stark_key(private_key)
signature = sign(msg_hash=message_hash, priv_key=private_key)
print(f'Public key: {public_key}')
print(f'Signature: {signature}')
