####################################################################################
# @title Deploy
# @dev used for recording the deploy process and latest contract addyys
# Includes
# - Current testing approach
# - Compile all
# - Deploy all
# - Latest test addys
# - Transaction / call / invoke formats
# - PP data for testing loans
# @author xan-crypto
####################################################################################

# new approach
1) compile all
2) deploy all contracts but TrustedAddy goes last + addys into constructor
3) update all contracts to point to TrustedAddy
4) issue USDC CZT and WETH
5) give USDC CZT and WTH approvals vs czcore
6) create 1 lp
7) create 1 pp
8) create 1 cb
9) test inc / dec collateral on cb
10) test refinance and repay

# compile all
starknet-compile Interface/LiquidityProvider.cairo --output Compiled/LiquidityProvider_compiled.json --abi Compiled/LiquidityProvider_abi.json
starknet-compile Interface/PriceProvider.cairo --output Compiled/PriceProvider_compiled.json --abi Compiled/PriceProvider_abi.json
starknet-compile Interface/CapitalBorrower.cairo --output Compiled/CapitalBorrower_compiled.json --abi Compiled/CapitalBorrower_abi.json
starknet-compile Interface/LoanLiquidator.cairo --output Compiled/LoanLiquidator_compiled.json --abi Compiled/LoanLiquidator_abi.json
starknet-compile Interface/GovenanceToken.cairo --output Compiled/GovenanceToken_compiled.json --abi Compiled/GovenanceToken_abi.json
starknet-compile Core/InsuranceFund.cairo --output Compiled/InsuranceFund_compiled.json --abi Compiled/InsuranceFund_abi.json
starknet-compile Core/CZCore.cairo --output Compiled/CZCore_compiled.json --abi Compiled/CZCore_abi.json
starknet-compile Core/Controller.cairo --output Compiled/Controller_compiled.json --abi Compiled/Controller_abi.json
starknet-compile Config/Settings.cairo --output Compiled/Settings_compiled.json --abi Compiled/Settings_abi.json
starknet-compile Testing/ERC20_base.cairo --output Compiled/ERC20_base_compiled.json --abi Compiled/ERC20_base_abi.json
starknet-compile Testing/Oracle.cairo --output Compiled/Oracle_compiled.json --abi Compiled/Oracle_abi.json
starknet-compile Config/TrustedAddy.cairo --output Compiled/TrustedAddy_compiled.json --abi Compiled/TrustedAddy_abi.json

starknet deploy --contract Compiled/LiquidityProvider_compiled.json --inputs 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0
starknet deploy --contract Compiled/PriceProvider_compiled.json --inputs 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0
starknet deploy --contract Compiled/CapitalBorrower_compiled.json --inputs 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0
starknet deploy --contract Compiled/LoanLiquidator_compiled.json --inputs 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0
starknet deploy --contract Compiled/GovenanceToken_compiled.json --inputs 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0
starknet deploy --contract Compiled/InsuranceFund_compiled.json --inputs 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0
starknet deploy --contract Compiled/CZCore_compiled.json --inputs 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0
starknet deploy --contract Compiled/Controller_compiled.json --inputs 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0
starknet deploy --contract Compiled/Settings_compiled.json --inputs 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0
starknet deploy --contract Compiled/ERC20_base_compiled.json --inputs 55534443 55534443 1000000000000000000000000 0 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0
starknet deploy --contract Compiled/ERC20_base_compiled.json --inputs 4414036 4414036 1000000000000000000000000 0 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0
starknet deploy --contract Compiled/ERC20_base_compiled.json --inputs 57455448 57455448 10000000000000000000000 0 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0
starknet deploy --contract Compiled/Oracle_compiled.json --inputs 57455448 57455448
starknet deploy --contract Compiled/TrustedAddy_compiled.json \
--inputs 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0 \
    0x01cc6009260bc07bc90c37825ebbcba7487df5432f44a33b4c6e627a0e6b34ca \
    0x0635da1896e5888ea6dcc75bb76fda6c98ab4a90fe24023eda56bf755d09f97f \
    0x00fb1c45c1b2ca8a6e1dac7b9e443d3e89d8bb2973f9ee5520e63b933fae466d \
    0x0038799b8051a9bcf0079a0afc92ed2e0549730d50d2bbbebc70af2033cede5d \
    0x049a17a22371b6541685452d7ed67d86f102a9b3d5a820cc4ff27a61e3bba082 \
    0x076cca08f6108503ba796025ce7515dba5e96f08c21fb46e8874d88fd45c64f0 \
    0x046ca6722813699a89d1870240b210ef20fd5432a8de8ad55952f2894e613b2b \
    0x0638562b86ddc4dfef445fcf7f91654f75c87300643df72b9435dd25f35905ab \
    0x01e2358ea4127e40a38e212d1ca8f07033b4c6557eafa95a4265d0fc0d77b30c \
    0x0095cda0341ee438a317e397149baade9b3527d607f4f73ae93711246ecdcd57 \
    0x067ba60038e4ae10f3ab83754afeba383071bb26d0ccc250c0304587ec2f27c7 \
    0x07bff1619fcfa179ead5765f09d6ad5494ed8feb226a066b7b67f16a7c1d5fd9 \
    0x06a1c0045db805d6426b930791a4de63d2f9dae660035bed1cf82d3c4751acd3

Last test
[owner] = 0x02e7b3a6df356dfb79f03a529338bf016e0c17ac9119550e372f588a6539f5e0
[lp] = 0x01cc6009260bc07bc90c37825ebbcba7487df5432f44a33b4c6e627a0e6b34ca
[pp] = 0x0635da1896e5888ea6dcc75bb76fda6c98ab4a90fe24023eda56bf755d09f97f
[cb] = 0x00fb1c45c1b2ca8a6e1dac7b9e443d3e89d8bb2973f9ee5520e63b933fae466d
[ll] = 0x0038799b8051a9bcf0079a0afc92ed2e0549730d50d2bbbebc70af2033cede5d
[gt] = 0x049a17a22371b6541685452d7ed67d86f102a9b3d5a820cc4ff27a61e3bba082
[if] = 0x076cca08f6108503ba796025ce7515dba5e96f08c21fb46e8874d88fd45c64f0
[czcore] = 0x046ca6722813699a89d1870240b210ef20fd5432a8de8ad55952f2894e613b2b
[controller] = 0x0638562b86ddc4dfef445fcf7f91654f75c87300643df72b9435dd25f35905ab
[setttings] = 0x01e2358ea4127e40a38e212d1ca8f07033b4c6557eafa95a4265d0fc0d77b30c
[usdc] = 0x0095cda0341ee438a317e397149baade9b3527d607f4f73ae93711246ecdcd57
[czt] = 0x067ba60038e4ae10f3ab83754afeba383071bb26d0ccc250c0304587ec2f27c7
[weth] = 0x07bff1619fcfa179ead5765f09d6ad5494ed8feb226a066b7b67f16a7c1d5fd9
[oracle] = 0x06a1c0045db805d6426b930791a4de63d2f9dae660035bed1cf82d3c4751acd3
[trusted] = 0x01ab1a7bc466200a11f5b0f4157dce36ab34fe09271b15bd21dec4d834c6be86

# check transactions / testing
starknet tx_status --hash 0x3d4689e0ec1af5cb1c79b9cdf0819400b6635838e9b2ddc5b80b4fda009d084
starknet get_transaction --hash 0x3d4689e0ec1af5cb1c79b9cdf0819400b6635838e9b2ddc5b80b4fda009d084
starknet get_transaction_receipt --hash 0x3d4689e0ec1af5cb1c79b9cdf0819400b6635838e9b2ddc5b80b4fda009d084

# call / invoke
starknet call \
    --address 0x059bdbb99a3daa7370a420951d6383ec3857a4b456785dee8e96a1bab1ce46f0 \
    --abi test_abi.json \
    --function check_user_balance \
    --inputs 0x0077113fdcee61d3257d7617d7b01a766a7fcd1dd05e96a91f00e13ea4e77399 \
             0x00fab882affd32569c826ae1df7f00f95013e1da5ded793f5553a62bfbf09cac \
             1152921504606846976000


# CB testing... math lib limitations
12345
100000000000
100000000
165425696298959820

517320185977821066645710419783955797854300374854704929745928561486316208555, 2819868301477575017305248444873021753314081755367429630057371505934600164739, 1168569266187495623930733612466896587645555634574438483193014900819665976824, 3304586175284284706389108604975660264482260261893960117610706245837885648243, 2000000, 1628448741648245036800002906075225705100596136133912895015035902954123957052

# [ signed_loanID_r , signed_loanID_s , signed_rate_r , signed_rate_s , rate , pp_pub , ..... ]

from starkware.crypto.signature.signature import (pedersen_hash, private_to_stark_key, sign)
private_key = 12345
message_hash = pedersen_hash(2000000)
public_key = private_to_stark_key(private_key)
signature = sign(msg_hash=message_hash, priv_key=private_key)
print(f'Public key: {public_key}')
print(f'Signature: {signature}')
